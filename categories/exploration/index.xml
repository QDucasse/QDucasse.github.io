<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploration on Lectern</title>
    <link>https://qducasse.github.io/categories/exploration/</link>
    <description>Recent content in Exploration on Lectern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://qducasse.github.io/categories/exploration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rocket chip structure</title>
      <link>https://qducasse.github.io/posts/2023-06-19-rocket_pmp/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-06-19-rocket_pmp/</guid>
      <description>Address checking in Rocket General address resolution Virtual Memory: (Chapter from [1]) In a CPU, pages of virtual memory are used by programs running on a computer. Virtual addresses are linked to corresponding physical addresses on the base of memory pages. A page table stored in memory (RAM) contains the links between virtual and physical addresses. This page table is unique for each running program on a computer through the program&amp;rsquo;s address space.</description>
    </item>
    
    <item>
      <title>Rocket chip structure</title>
      <link>https://qducasse.github.io/posts/2023-05-26-rocket_project_structure-copy/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-05-26-rocket_project_structure-copy/</guid>
      <description>Rocket core structure and exploration The objective here is to get a feeling of how things are defined in the rocket chip generator. I will look at the files in src/main/scala/rocket for the latest release 1.6:
Logic:
 ALU.scala: Arithmetic logical unit - performs all base operations. AMOALU.scala: Atomic memory operation ALU - performs all atomic memory operations. Breakpoint.scala: Breakpoint utilities BTB.scala: Branch target buffer - predicts branch targets Decode.scala: Decoder - applies the bit patterns defined in IDecode Events.</description>
    </item>
    
    <item>
      <title>Running raw binary on Rocket&#39;s emulator</title>
      <link>https://qducasse.github.io/posts/2023-02-07-rocket_running_raw_binary/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-02-07-rocket_running_raw_binary/</guid>
      <description>Gigue presentation and binary generation My goal is to run raw binary code on top of the Rocket emulator. The code itself is the output of my JIT code generator Gigue. It generates random JIT methods and Polymorphic Inline Caches (machine code switch before different methods). It generates raw binary instructions as the succession of the interpretation loop, a filler and the JIT code.
The generated code is customizable by defining:</description>
    </item>
    
    <item>
      <title>Adding a unit test in Rocket</title>
      <link>https://qducasse.github.io/posts/2023-02-04-rocket_adding_a_unit_test/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-02-04-rocket_adding_a_unit_test/</guid>
      <description>Unit test workflow recap As presented in a previous post, the Rocket framework for unit tests revolves around the riscv-tests repository. Those tests are separated by the extensions they use and the Test Virtual Machine (TVM) they should be run on. Simple macros expand the utilities and encodings are added to define instructions, Control Status Registers (CSRs), etc.
Those tests are compiled using the RISC-V GNU toolchain, (rocket-tools in the case of Rocket) and installed in /path/to/toolchain/riscv64-unknown-elf/share/riscv-tests/.</description>
    </item>
    
    <item>
      <title>Rocket test macros</title>
      <link>https://qducasse.github.io/posts/2023-02-02-rocket_inspecting_a_test/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-02-02-rocket_inspecting_a_test/</guid>
      <description>Unit test workflow recap As presented in a previous post, the Rocket framework for unit tests revolves around the riscv-tests repository. Those tests are separated by the extensions they use and the Test Virtual Machine (TVM) they should be run on. Simple macros expand the utilities and encodings are added to define instructions, Control Status Registers (CSRs), etc.
Those tests are compiled using the RISC-V GNU toolchain, (rocket-tools in the case of Rocket) and installed in /path/to/toolchain/riscv64-unknown-elf/share/riscv-tests/.</description>
    </item>
    
    <item>
      <title>Rocket unit tests</title>
      <link>https://qducasse.github.io/posts/2023-02-01-rocket_unit_tests/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-02-01-rocket_unit_tests/</guid>
      <description>Unit tests overview As we have seen in a previous post, we can launch the unit test suite through the C emulator using:
$ cd $ROCKET_ROOT/rocket-chip/emulator $ make -jN run-asm-tests $ make -jN run-bmark-tests $ make -jN run-asm-tests-debug # With waveforms It is also possible to launch individual tests:
$ make output/rv64ui-p-add.out # Emulation $ make output/rv64ui-p-add.vcd # Waveforms Each run produces the Verilog code of the chip (through Chisel):</description>
    </item>
    
    <item>
      <title>Adding instructions to the RISC-V Rocket core</title>
      <link>https://qducasse.github.io/posts/2022-04-12-rocket_instruction/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2022-04-12-rocket_instruction/</guid>
      <description>Introduction The RISC-V ISA was born with modularity, extensibility, and open-source in mind. To this end, several processors have their source code available and can be modified to add co-processing units or even new instructions. Our objective here will be to add duplicated instructions in the Rocket core to implement the backbone of a security model presented in RIMI.
Choosing the opcodes We need to duplicate several instructions:
 lbu, lhu, lwu and ld for loads sb, sh, sw and sd for stores jal and jalr to add a domain change possibility  The repository riscv-opcodes contains all instruction opcodes:</description>
    </item>
    
    <item>
      <title>Cogit runtime trampolines</title>
      <link>https://qducasse.github.io/posts/2022-04-04-trampolines/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2022-04-04-trampolines/</guid>
      <description>Cogit trampolines cePICMissTrampoline
ceCallCogCodePopReceiverAndClassRegs
ceCallCogCodePopReceiverReg
ceCannotResumeTrampoline
ceCaptureCStackPointers
ceCheckFeaturesFunction
ceCheckForInterruptTrampoline
ceEnclosingObjectTrampoline
ceEnterCogCodePopReceiverReg
ceFetchContextInstVarTrampoline
ceFlushICache
ceFreeTrampoline
ceGetFP
ceGetSP
ceMallocTrampoline
ceMethodAbortTrampoline
ceNonLocalReturnTrampoline
cePICAbortTrampoline
cePrimReturnEnterCogCode
cePrimReturnEnterCogCodeProfiling
ceReapAndResetErrorCodeTrampoline
ceReturnToInterpreterTrampoline
ceSendMustBeBooleanAddFalseTrampoline
ceSendMustBeBooleanAddTrueTrampoline
ceStoreContextInstVarTrampoline
ceTraceBlockActivationTrampoline
ceTraceLinkedSendTrampoline
ceTraceStoreTrampoline
ceTryLockVMOwner
ceUnlockVMOwner
SimpleStackBasedCogit trampolines ceCPICMissTrampoline
ceCheckForInterruptTrampoline
ceEnclosingObjectTrampoline
ceFetchContextInstVarTrampoline
ceMethodAbortTrampoline
ceNonLocalReturnTrampoline
cePICAbortTrampoline
cePrimReturnEnterCogCode
cePrimReturnEnterCogCodeProfiling
ceReapAndResetErrorCodeTrampoline
ceStoreContextInstVarTrampoline
ceTraceBlockActivationTrampoline
ceTraceLinkedSendTrampoline
ceTraceStoreTrampoline
StackToRegisterMappingCogit trampolines ceEnclosingObjectTrampoline
ceFetchContextInstVarTrampoline
ceNonLocalReturnTrampoline
ceReapAndResetErrorCodeTrampoline
ceStoreContextInstVarTrampoline
ceTraceBlockActivationTrampoline
ceTraceLinkedSendTrampoline
ceTraceStoreTrampoline
RegisterAllocatingCogit trampolines ceCheckForInterruptTrampoline
ceSendMustBeBooleanAddFalseTrampoline
ceSendMustBeBooleanAddTrueTrampoline
Trampoline generation generateTrampolines 	&amp;#34;Generate the run-time entries and exits at the base of the native code zone and update the base.</description>
    </item>
    
  </channel>
</rss>
