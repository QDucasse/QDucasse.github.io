<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocket on Lectern</title>
    <link>https://qducasse.github.io/tags/rocket/</link>
    <description>Recent content in rocket on Lectern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://qducasse.github.io/tags/rocket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rocket unit tests</title>
      <link>https://qducasse.github.io/posts/2023-02-01-rocket_unit_tests/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-02-01-rocket_unit_tests/</guid>
      <description>Unit tests overview As we have seen in a previous post, we can launch the unit test suite through the C emulator using:
$ cd $ROCKET_ROOT/rocket-chip/emulator $ make -jN run-asm-tests $ make -jN run-bmark-tests $ make -jN run-asm-tests-debug # With waveforms It is also possible to launch individual tests:
$ make output/rv64ui-p-add.out # Emulation $ make output/rv64ui-p-add.vcd # Waveforms Each run produces the Verilog code of the chip (through Chisel):</description>
    </item>
    
    <item>
      <title>Rocket chip building</title>
      <link>https://qducasse.github.io/posts/2023-01-27-rocket_installation/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2023-01-27-rocket_installation/</guid>
      <description>Installation and simulation of the Rocket processor Rocket is a fully-featured RISC-V processor capable of running Linux. Here, we will install the core and its toolchain.
Setup Since we will need two different repositories, let&amp;rsquo;s setup a root directory rocket-root and clone both of the projects:
$ mkdir rocket-root &amp;amp;&amp;amp; cd rocket-root $ git clone git@github.com:chipsalliance/rocket-chip.git $ git clone git@github.com:chipsalliance/rocket-tools.git $ export ROCKET_ROOT=&amp;#34;$HOME/path/to/rocket-root&amp;#34; The known checkout hash for the rocket-tools repository is noted in the file riscv-tools.</description>
    </item>
    
    <item>
      <title>Adding instructions to the RISC-V Rocket core</title>
      <link>https://qducasse.github.io/posts/2022-04-12-rocket_instruction/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2022-04-12-rocket_instruction/</guid>
      <description>Introduction The RISC-V ISA was born with modularity, extensibility, and open-source in mind. To this end, several processors have their source code available and can be modified to add co-processing units or even new instructions. Our objective here will be to add duplicated instructions in the Rocket core to implement the backbone of a security model presented in RIMI.
Choosing the opcodes We need to duplicate several instructions:
 lbu, lhu, lwu and ld for loads sb, sh, sw and sd for stores jal and jalr to add a domain change possibility  The repository riscv-opcodes contains all instruction opcodes:</description>
    </item>
    
  </channel>
</rss>
