<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rocket on Lectern</title>
    <link>https://qducasse.github.io/tags/rocket/</link>
    <description>Recent content in rocket on Lectern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://qducasse.github.io/tags/rocket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adding instructions to the RISC-V Rocket core</title>
      <link>https://qducasse.github.io/posts/rocket_instruction/</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/rocket_instruction/</guid>
      <description>Introduction The RISC-V ISA was born with modularity, extensibility, and open-source in mind. To this end, several processors have their source code available and can be modified to add co-processing units or even new instructions. Our objective here will be to add duplicated instructions in the Rocket core to implement the backbone of a security model presented in RIMI.
Choosing the opcodes We need to duplicate several instructions:
 lbu, lhu, lwu and ld for loads sb, sh, sw and sd for stores jal and jalr to add a domain change possibility  The repository riscv-opcodes contains all instruction opcodes:</description>
    </item>
    
  </channel>
</rss>
