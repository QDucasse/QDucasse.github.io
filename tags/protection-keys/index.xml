<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>protection keys on Lectern</title>
    <link>https://qducasse.github.io/tags/protection-keys/</link>
    <description>Recent content in protection keys on Lectern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://qducasse.github.io/tags/protection-keys/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NoJITsu: Locking Down JavaScript Engines</title>
      <link>https://qducasse.github.io/posts/2022-04-28-nojitsu/</link>
      <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qducasse.github.io/posts/2022-04-28-nojitsu/</guid>
      <description>Introduction This post presents the article by Park et al. entitled &amp;ldquo;NoJITsu: Locking Down JavaScript Engines&amp;rdquo;. The authors present both an attack against JIT compilers (injecting malicious bytecodes) and a defense solution. We will focus on the defense part and look at the NoJITsu design in details along with its security and performance analysis.
NoJITsu Big Picture NoJITsu goal is to deploy fine-grained security policies around critical objects that are used at runtime by the VM.</description>
    </item>
    
  </channel>
</rss>
